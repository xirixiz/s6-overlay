on:
  workflow_call:
    inputs:
      tag-prefix:
        required: true
        type: string
      checkout-type:
        required: true
        type: string

jobs:
  docker-publish:
    runs-on: ubuntu-22.04
    env:
      LATEST_UBUNTU_VERSION: "22.04"
    strategy:
      # We want to limit the number of jobs to the number of versions that we're offering (since we want the dependency order to be built correctly)
      max-parallel: 2
      matrix:
        linux-flavor:
          - ubuntu
        version: 
          - "20.04"
          - "22.04"
    steps:
      ##
      # Checkout branch (for push deployments)
      ##
      - name: Get branch name
        if: inputs.checkout-type == 'branch'
        id: branch-name
        uses: tj-actions/branch-names@v8

      - uses: actions/checkout@v3
        if: inputs.checkout-type  == 'branch'
        with:
          ref: ${{ steps.branch-name.outputs.current_branch }}
      
      ##
      # Checkout latest stable release (for production releases)
      ##
      - name: Get latest stable release
        if: inputs.checkout-type  == 'latest-stable'
        id: latest-stable-version
        run: |
          echo "LATEST_STABLE_VERSION=$(curl --silent --header "Accept: application/vnd.github.v3.sha" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')" >> $GITHUB_OUTPUT

      - name: Confirm release tag
        if: inputs.checkout-type  == 'latest-stable'
        run: |
          echo "Latest Stable Release Tag: ${{ steps.latest-stable-version.outputs.LATEST_STABLE_VERSION }}"
        
      - name: Checkout latest stable tag
        if: inputs.checkout-type  == 'latest-stable'
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.latest-stable-version.outputs.LATEST_STABLE_VERSION }}

      ##
      # Docker build & publish
      ##
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: "⚡️ Get the S6 version from the version file"
        run: |
          file_contents=$(cat ./s6-overlay_version.txt)
          echo "S6_OVERLAY_VERSION=$file_contents" >> $GITHUB_ENV
      
      - name: "👨‍🔬 Set docker tags: Non-Release "
        if: inputs.checkout-type == 'branch'
        run: echo "DOCKER_TAGS=serversideup/s6-overlay:${{ inputs.tag-prefix}}${{ matrix.linux-flavor }}-${{ matrix.version }}, serversideup/s6-overlay:${{ inputs.tag-prefix}}${{ matrix.linux-flavor }}-${{ matrix.version }}-${{ env.S6_OVERLAY_VERSION }}" >> $GITHUB_ENV

      - name: "🚀 Set docker tags: Other Ubuntu Release"
        if: ${{ matrix.version != env.LATEST_UBUNTU_VERSION && inputs.checkout-type == 'latest-stable' }} 
        run: echo "DOCKER_TAGS=serversideup/s6-overlay:${{ matrix.linux-flavor }}-${{ matrix.version }}, serversideup/s6-overlay:${{ matrix.linux-flavor }}-${{ matrix.version }}-${{ env.S6_OVERLAY_VERSION }}" >> $GITHUB_ENV

      - name: "🚀 Set docker tags: Latest Ubuntu Release"
        if: ${{ matrix.version == env.LATEST_UBUNTU_VERSION && inputs.checkout-type == 'latest-stable' }} 
        run: echo "DOCKER_TAGS=serversideup/s6-overlay:${{ matrix.linux-flavor }}-${{ matrix.version }}, serversideup/s6-overlay:${{ matrix.linux-flavor }}-${{ matrix.version }}-${{ env.S6_OVERLAY_VERSION }}, serversideup/s6-overlay:${{ env.S6_OVERLAY_VERSION }}, serversideup/s6-overlay:latest" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm/v7
            linux/arm64/v8
            linux/ppc64le
            linux/s390x
          build-args: |
            BASE_IMAGE=${{ matrix.linux-flavor }}:${{ matrix.version }}
          pull: true
          push: true
          tags: ${{ env.DOCKER_TAGS }}